//*****************************************************************************
//
// Имя файла    : 'clock.cpp'
// Заголовок    : Основной модуль тактирование
// Автор        : Барышников Р. А.
// Контакты     : plexus_bra@rambler.ru
// Дата         : 12.10.2012
//
//*****************************************************************************

#include "core\clock.h"
#include "core\processor.h"

// =============================================================================
//                                 Отладка
// =============================================================================

// =============================================================================
//                                Костанты
// =============================================================================

    // Управление осциллятором LFXT
    #define OSC_OFF         true
    #define OSC_ON          false
    #define XTS_LF          false
    #define XTS_HF          true

    // Управление осциллятором XT2
    #define XT2_OFF         true
    #define XT2_ON          false

// =============================================================================
//                                 Макросы
// =============================================================================

// =============================================================================
//                           Глобальные переменные
// =============================================================================

// =============================================================================
//                             Прототипы функций
// =============================================================================

    // Конфигурация LFXTCLK
    void ConfigLFXT(bool oscoff, bool xts);
    // Конфигурация XT2CLK
    void ConfigXT2(bool xt2off);
      
// ============================================================================
///    
///                          Конфигурация LFXTCLK
///
// ============================================================================
/// \param  oscoff - отключение осциллятора LFXT
/// \param  xts - режим HF/LF
// ============================================================================

void ConfigLFXT(bool oscoff, bool xts)
{
    if (oscoff)
    {
        _BIS_SR(OSCOFF);
    }
    
    // Режим высокой частоты (требуются дополнительные конденсаторы)
    // xts = 0: Режим низкой частоты
    // xts = 1: Режим высокой частоты
    if (xts)
    {
        // Установить бит XTS
        BCSCTL1 |= XTS;
    }
    else
    {
        // Очистить бит XTS
        BCSCTL1 &= ~XTS;
    }
}

// ============================================================================
///    
///                           Конфигурация ACLCK
///
// ============================================================================
/// \param  diva - Делитель 1/2/4/8
// ============================================================================

void ConfigACLCK(uchar diva)
{
    // Включение осциллятора с пониженной частотой
    ConfigLFXT(OSC_ON, XTS_LF);
    
    // Установка делителя для ACLCK
    BCSCTL1 |= diva;
}

// ============================================================================
///    
///                           Конфигурация XT2CLK
///
// ============================================================================
/// \param  xt2off - выключение XT2CLK
// ============================================================================

void ConfigXT2(bool xt2off)
{
    if (xt2off)
    {
        BCSCTL1 |= XT2OFF;
    }
    else
    {
        BCSCTL1 &= ~XT2OFF;
    }
}

// ============================================================================
///    
///             Конфигурация главного источника тактирования MCLK
///
// ============================================================================
/// \param  divm - делитель 1/2/4/8
/// \param  source - выбор источника MCLK
/// \param  cpuoff - отключение CPU
// ============================================================================

void ConfigMCLK(uchar divm, uchar source, bool cpuoff)
{
    // Установка битов SELMx и DIVMx
    BCSCTL2 |= source | divm;
    
    // Выключение CPU
    if (cpuoff)
    {
        _BIS_SR(CPUOFF);
    }
}

// ============================================================================
///    
///                            Конфигурация DCO
///
// ============================================================================
/// \param  frq - частота DCO (1/8/12/16 МГц)
// ============================================================================

void ConfigDCO(uint frq)
{
    // Проверка констант
    if (CALBC1_1MHZ == 0xFF || CALDCO_1MHZ == 0xFF)                                     
    {  
        while(1);
    } 

    // MSP430G2211 не поддерживает частоту выше 1 МГц
    if (frq != DCO_1MHZ)
    {
        
        #if defined __MSP430G2211__
            BCSCTL1 = CALBC1_1MHZ;
            DCOCTL = CALDCO_1MHZ;
            #warning Процессор не поддерживает частоту больше 1 МГц
        #else
            DCOCTL = frq;
            BCSCTL1 = (frq + 1);
        #endif
    }
    else
    {
        BCSCTL1 = CALBC1_1MHZ;
        DCOCTL = CALDCO_1MHZ;
    }
    
    // Возможность выбора внутреннего или 
    // внешнего резистора не реализована
    
}

// ============================================================================
///    
///                          Конфигурация SMCLK
///
// ============================================================================
/// \param  divs - делитель 1/2/4/8
/// \param  source - источник тактирования
/// \param  scg1 - отключение SMCLK
// ============================================================================

void ConfigSMCLK(uchar divs, uchar source, bool scg1)
{
    BCSCTL2 |= source | divs;
    if (scg1)
    {
        _BIS_SR(SCG1);
    }
}